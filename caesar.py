import secrets


def main():
    # asks user for required function until valid response is given
    while True:
        function = input("Do you want to encrypt or decrypt? ").strip().lower()
        if function in ["encrypt", "decrypt"]:
            break
        print("Invalid function, please choose one of the following (encrypt/decrypt).")

    output = caesar(function)
    # type comparison to know how many values we will output
    if type(output) is str:
        print(f"Output: {output}")
    # if key is also outputted, print both
    elif type(output) is tuple:
        print(f"Output: {output[0]}")
        print(f"Generated Key: {output[1]}")


def caesar(function):
    # ask if text will be provided in terminal or from file
    while True:
        choice = input("Read from (f)ile or (w)rite text here? (f/w) ").lower().strip()
        if choice not in ["f", "w"]:
            print(
                "Invalid, please write 'f' to read from file or 'w' to write text here."
            )
        else:
            break

    # get file from user
    if choice == "f":
        while True:
            try:
                filename = input("File name? ")
                inptr = open(filename, "r")
                break
            except FileNotFoundError:
                print(
                    """Couldn't find file. Make sure file is inside project folder, otherwise write the path to the file and make sure to write the file extension, ex: ###.txt"""
                )

        phrase = inptr.read()  # reads text from file and stores it in phrase
        inptr.close()

    # get text from user
    elif choice == "w":
        phrase = input("Enter Text: ")

    # ask if user has key or wants an auto key
    while True:
        choice2 = (
            input(
                """If you are decrypting from a file created by this program choose 'r'. Otherwise feel free to choose.\n(P)rovide key or use (r)andom key/
                     (r)ead key from file?(p/r) """
            )
            .lower()
            .strip()
        )
        if choice2 not in ["p", "r"]:
            print(
                "Invalid, please write 'p' to provide key or 'r' to randomly generate a key / read key from a file."
            )

        elif choice2 == "r" and function == "decrypt" and choice == "w":
            print(
                "Cannot find key automatically to decrypt text written in terminal, please manually provide key."
            )

        else:
            break

    # using secret library to randomly generate the key
    if choice2 == "r":
        key = secrets.randbelow(96) + 32

    # taking key input from user and ensuring it is valid
    elif choice2 == "p":
        while True:
            try:
                key = int(input("Key: "))
                if key > 95 or key < 1:
                    raise ValueError
                break
            except ValueError:
                print(
                    "Invalid Key, please enter an integer between 1 & 95"
                )  # key can be up to 95 because it's still within constraints of ascii characters we can use

    # encrypting the input
    if function == "encrypt":
        encryption = encrypt(phrase, key)
        if choice == "f":
            outptr = open(
                "caesar_" + filename, "w"
            )  # opens a new file to write to prefixed by caesar_
            keyptr = open(
                "key_caesar_" + filename, "w"
            )  # writes key to a separate file to store it
            keyptr.writelines(str(key) + "\n")
            outptr.writelines(encryption)
            outptr.close()
            keyptr.close()

        # outputs the key if it is generated randomly
        if choice2 == "r":
            return encryption, key

        return encryption

    # decrypting the input
    elif function == "decrypt":
        # read key from file in case file is generated by program
        if choice2 == "r" and choice == "f":
            try:
                inptr = open("key_" + filename, "r")
                key = int(inptr.readline())
            except FileNotFoundError:
                return "Cannot find file containing the key."
            except ValueError:
                return "Provided file does not have a Valid Key."
            inptr.close()

        decryption = decrypt(phrase, key)
        if choice == "f":
            outptr = open(
                "de_" + filename, "w"
            )  # writes decrypted text in a new file to store it
            outptr.writelines(decryption)
            outptr.close()

        return decryption


# function to encrypt
def encrypt(ciphertext, key):
    encrypted = ""
    for char in range(len(ciphertext)):
        x = ord(ciphertext[char])
        # make sure x is in values we can change before we change it
        if 126 >= x >= 32:
            x = ((x + key - 32) % 95) + 32
        encrypted += chr(x)

    return encrypted


# function to decrypt
def decrypt(plaintext, key):
    decrypted = ""
    for char in range(len(plaintext)):
        x = ord(plaintext[char])
        # make sure x is in values we can change before we change it
        if 126 >= x >= 32:
            x = ((x - key - 32) % 95) + 32
        decrypted += chr(x)

    return decrypted


if __name__ == "__main__":
    main()
